---
title: "Homework 4: Writing Functions, Querying an API, and Tidy-Style Functions"
author: "Mike Maccia"
format: pdf
editor: visual
---

```{r}
#|message=FALSE
#|warning=FALSE

# Load in necessary packages
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(httr))
suppressPackageStartupMessages(library(jsonlite))
```

## Task 1: Conceptual Questions

### Answering Question prompts in the form of a list


```{r}
t1_q1 <- "What is the purpose of the `lapply()` function? What is the equivalent 
`purrr` function?"
t1_a1 <- "The `lapply()` function is used to apply functions to lists. For example, 
if we used the function `mean()` within the `lapply()`, we could apply that function 
to each list element. The equivalent function in the `purrr` package is `map()`, 
which can be applied to 1 list. There is also `map2()` which can apply functions 
to 2 lists and then `pmap()` can apply the function to any number of lists"
t1_q2 <- "Suppose we have a list called `my_list`. Each element of the list is a 
numeric data frame (all columns are numeric). We want to use `lapply()` to run the code 
`cor(numeric_matrix, method = 'kendall')` on each element of the list. Write code to do
this below!"
t1_a2 <- "#make a numeric list

df_1 <- data.frame(a = 1:5, b = 11:15)
df_2 <- data.frame (c = rnorm(5), d = rnorm(5))
df_3 <- data.frame(e = rnorm(4), f = c(2, 5, 22, 23))

my_list <- list(df_1, df_2, df_3)

t1_q2 <- lapply(my_list, FUN = cor, method = 'kendall')"
t1_q3 <- "What are two advantages of using `purrr` functions instead of the `BaseR` 
apply family?"
t1_a3 <- "One advantage of `purrr` over the apply family is that it provides a 
`tidyverse` alternative to the `apply()` family, allowing for consistent syntax 
and the output is more predictable. Another advantage is that `purrr` allows you 
shorthand to make anonymous functions."
t1_q4 <- "What is a side-effect function?"
t1_a4 <- "Side-effect functions are functions that produce something but do not 
change the data. Some examples of side-effect functions include `print()`, 
`write_csv()`, or `plot()`"
t1_q5 <- "Why can you name a variable `sd` in a function and not cause any issues 
with the `sd` function?"
t1_a5 <- "You can name a variable `sd` within a function and not cause any issues 
with the `sd` function due to Lexical Scoping. When a function is called, the 
environment that the function is performed in is temporary. Once the function is 
complete, that variable created within the function is not saved. It only works 
within the local function and not the `globalenv()`."
```

```{r, results='asis'}
#make a list of q & a
t1_list <- list(
  "Question 1" = t1_q1, 
  "Answer 1" = t1_a1,
  "Question 2" = t1_q2, 
  "Answer 2" = t1_a2,
  "Question 3" = t1_q3, 
  "Answer 3" = t1_a3,
  "Question 4" = t1_q4, 
  "Answer 4" = t1_a4,
  "Question 5" = t1_q5, 
  "Answer 5" = t1_a5)

for (i in 1:5) {
  cat(paste0("Question ", i, ": "), t1_list[[paste0("Question ", i)]], "\n\n")
  cat(paste0("Answer ", i, ": "), t1_list[[paste0("Answer ", i)]], "\n\n")
}
```

## Task 2: Writing R Functions

### Question 1: Create a function to calculate root mean square error

```{r}
#function to getRMSE - first input will be response, 2nd will be predictions, and add
#elipses for additional arguments
getRMSE <- function(resp, pred, ...) {
#start by getting the squared error
  sq_error <- (resp - pred)^2
#take mean of squared error, then the square root
#add ... to allow for additional arguments
  rmse <- sqrt(mean(sq_error, ...))
#return the root mean square error
  return(rmse)
}
```

### Question 2: Testing our function to get the Root Mean Square Error

Let's create some response and predicted values

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))

getRMSE(resp, pred)
```

Now will replace 2 response values with missing

```{r}
resp[c(5, 9)] <- NA_real_
```

Let's use my function without specifying how to handle missing values

```{r}
getRMSE(resp, pred)
```

Let's retest the function specifying how to handle missing values

```{r}
getRMSE(resp, pred, na.rm=T)
```

### Question 3: Now let's create a function to calculate the mean absolute deviation.

```{r}
#function to get the Mean absolute deviation - first input will be response, 
#2nd will be predictions, and add elipses for additional arguments 
getMAE <- function(resp, pred, ...) {
#take the mean of the absolute value of response minus predicted
  mean_abs_dev <- mean(abs((resp - pred)),...)

#return the mean absolute deviation
  return(mean_abs_dev)
}
```

### Question 4: Testing our function to get the Mean Absolute Deviation

Let's create some response and predicted values

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))

getMAE(resp, pred)
```

Now will replace 2 response values with missing

```{r}
resp[c(12, 33)] <- NA_real_
```

Let's use my function without specifying how to handle missing values

```{r}
getMAE(resp, pred)
```

Let's retest the function specifying how to handle missing values

```{r}
getMAE(resp, pred, na.rm=T)
```

### Question 5: Create a wrapper function to return both the Root Mean Square Error and Mean Absolute Deviation with a single call

```{r}
pred_wrapper <- function(resp, pred, metrics = c("rmse", "mae"), ...) {

#first, need to check if input is a vector, atomic, and numeric
#will do first for resp input, then for pred input

  if (!(is.vector(resp) && is.atomic(resp) && is.numeric(resp))) {
    message("Error: 'resp' input must be a numeric atomic vector")
    return(NULL)
  }
  
  if (!(is.vector(pred) && is.atomic(pred) && is.numeric(pred))) {
    message("Error: 'pred' input must be a numeric atomic vector")
    return(NULL)
  }
  #create a list to store the results
    
  results <- list()
  
  #Use root mean square function
  if ("rmse" %in% metrics) {
    results[["Root Mean Square Error"]] <- getRMSE(resp, pred, ...)
  }
  
  #use mean absolute deviation function
  if ("mae" %in% metrics){
    results[["Mean Absolute Deviation"]] <- getMAE(resp, pred, ...)
  }
  
  #return the list of results
  return(results)
  
}
```

### Question 6: Testing the Wrapper Function

Let's create some response and predicted values

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
```

Let's test the wrapper function first by calling each metric by themselves

First will be for Root Mean Square Error

```{r}
pred_wrapper(resp,pred, metrics = "rmse")
```

Next we will call for Mean Absolute Deviation

```{r}
pred_wrapper(resp,pred, metrics = "mae")
```

Now let's call both metrics

```{r}
pred_wrapper(resp,pred, metrics = c("rmse", "mae"))
```

Now we are going to change 2 response values to missing

```{r}
resp[c(1, 82)] <- NA_real_
```

We will test using the original function, followed by testing indicating to remove missing values

```{r}
pred_wrapper(resp,pred, metrics = c("rmse", "mae"))
```

```{r}
pred_wrapper(resp,pred, metrics = c("rmse", "mae"), na.rm=TRUE)
```

Now, let's create a data frame. We will then test what happens when that is input into the function

```{r}
test_df <- data.frame(
  letters = 1:6, 
  age = sample(18:45, 6)
)
```

```{r}
pred_wrapper(test_df,pred, metrics = c("rmse", "mae"))
```

## Task 3: Querying an API and a Tidy-Style Function

For this task we will connect to an API from [News API](https://newsapi.org/).

### Question 1: Use the `GET()` function from the `httr` package to return an interesting topic. Let's get top headlines for recent sports events

```{r}
URL_sports_headlines <- "https://newsapi.org/v2/everything?q=Yankees&source=us&apiKey=e09f041046584e7c85072592a8add194"

id_sports_headlines <- httr::GET(URL_sports_headlines)
```

### Question 2: Now let's parse what was returned and find the data frame with article information

```{r}
#Look at structure of data
str(id_sports_headlines, max.level = 1)
```

Next, parse the data using `jsonlite` package. We will put the article information in a tibble then print.

```{r}
#converting from JSON
parsed_sports_headlines <- fromJSON(rawToChar(id_sports_headlines$content))
#using the article column to create a tibble to output
sports_headlines <- as_tibble(parsed_sports_headlines$articles)
#print the tibble, adding a width argument to keep most of information on page
print(sports_headlines, n = nrow(sports_headlines), width = Inf)

```

### Question 3: Building a function to search the API

This function will take some inputs in order to build the URL to search from the api on [News API](https://newsapi.org/). The inputs will be the subject to search for, the date to search from (should be in YYYY-MM-DD format, will search to present), followed by the API key.

The function will then output a tibble with the article information.

```{r}
build_newsapi_url <- function(subject, start_date, api_key) {
  #base url from website
  base_url <- "https://newsapi.org/v2/everything?"
  
  #checking date format is correct - make a stop if incorrect format
 is_valid_date <- function (dates){
   grepl("^\\d{4}-\\d{2}-\\d{2}$", dates)
 }
  if (!is_valid_date(start_date)){
    stop("start_date must be in 'yyyy-mm-dd' format")
  }
   
   
  #construct the full url
  url <- paste0(base_url, 
                "q=", subject,
                "&from=", start_date,
                "&apikey=", api_key)
  
  #now call the api
  topic_search <- httr::GET(url)
  
  #take the data using `fromJSON` to make readable
  parsed_topic_search <- fromJSON(rawToChar(topic_search$content))
  #make the results a tibble with the article column
  search_results <- as_tibble(parsed_topic_search$articles)
  
  print(search_results, n = nrow(search_results), width = Inf)
}
```

We are going to test by searching for "gamestop" from May 19, 2025 to present.

```{r}
build_newsapi_url("gamestop", "2025-06-12", "e09f041046584e7c85072592a8add194")

```
